{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.initialState = initialState.map((row)=>[\n                ...row\n            ]);\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    moveLeft() {\n        if (this.status !== \"playing\") return;\n        let stateChanged = false;\n        for(let row = 0; row < 4; row++){\n            const newRow = this.merge(this.state[row]);\n            if (newRow.toString() !== this.state[row].toString()) stateChanged = true;\n            this.state[row] = newRow;\n        }\n        if (stateChanged) this.spawn();\n        this.checkLose();\n        this.checkWin();\n    }\n    moveRight() {\n        this.state = this.state.map((row)=>row.reverse());\n        this.moveLeft();\n        this.state = this.state.map((row)=>row.reverse());\n    }\n    moveUp() {\n        this.transpose();\n        this.moveLeft();\n        this.transpose();\n    }\n    moveDown() {\n        this.transpose();\n        this.moveRight();\n        this.transpose();\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state.map((row)=>[\n                ...row\n            ]);\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.status = \"playing\";\n        this.spawn();\n        this.spawn();\n        this.checkWin();\n        this.checkLose();\n    }\n    restart() {\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    spawn() {\n        const emptyTiles = [];\n        for(let row = 0; row < 4; row++){\n            for(let column = 0; column < 4; column++)if (this.state[row][column] === 0) emptyTiles.push({\n                row: row,\n                column: column\n            });\n        }\n        if (emptyTiles.length > 0) {\n            const { row: row, column: column } = emptyTiles[Math.floor(Math.random() * emptyTiles.length)];\n            this.state[row][column] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    transpose() {\n        const transposedGrid = this.initialState.map((row)=>[\n                ...row\n            ]);\n        for(let row = 0; row < 4; row++)for(let column = 0; column < 4; column++)transposedGrid[column][row] = this.state[row][column];\n        this.state = transposedGrid;\n    }\n    merge(row) {\n        let filteredRows = row.filter((element)=>element !== 0);\n        for(let i = 0; i < filteredRows.length - 1; i++)if (filteredRows[i] === filteredRows[i + 1]) {\n            filteredRows[i] *= 2;\n            this.score += filteredRows[i];\n            filteredRows[i + 1] = 0;\n        }\n        filteredRows = filteredRows.filter((element)=>element !== 0);\n        while(filteredRows.length !== 4)filteredRows.push(0);\n        return filteredRows;\n    }\n    checkWin() {\n        for(let row = 0; row < 4; row++){\n            for(let column = 0; column < 4; column++)if (this.state[row][column] === 2048) this.status = \"win\";\n        }\n    }\n    checkLose() {\n        for(let row = 0; row < 4; row++)for(let column = 0; column < 4; column++){\n            if (this.state[row][column] === 0) return;\n        }\n        for(let row = 0; row < 4; row++)for(let column = 0; column < 4; column++){\n            if (row < 3 && this.state[row][column] === this.state[row + 1][column] || column < 3 && this.state[row][column] === this.state[row][column + 1]) return;\n        }\n        this.status = \"lose\";\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$cells = document.querySelectorAll(\".field-cell\");\nconst $09e991522ca7e64e$var$buttonStart = document.querySelector(\".button.start\");\ndocument.addEventListener(\"keydown\", (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === \"playing\") {\n        switch(e.key){\n            case \"ArrowLeft\":\n                $09e991522ca7e64e$var$game.moveLeft();\n                break;\n            case \"ArrowRight\":\n                $09e991522ca7e64e$var$game.moveRight();\n                break;\n            case \"ArrowUp\":\n                $09e991522ca7e64e$var$game.moveUp();\n                break;\n            case \"ArrowDown\":\n                $09e991522ca7e64e$var$game.moveDown();\n                break;\n        }\n        $09e991522ca7e64e$var$updateView();\n    }\n});\nfunction $09e991522ca7e64e$var$updateView() {\n    let i = 0;\n    const state = $09e991522ca7e64e$var$game.getState();\n    for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n        const cell = $09e991522ca7e64e$var$cells[i];\n        cell.className = \"field-cell\";\n        if (state[row][col]) {\n            cell.textContent = state[row][col];\n            cell.classList.add(`field-cell--${state[row][col]}`);\n        } else cell.textContent = \"\";\n        i++;\n    }\n    document.querySelector(\".game-score\").textContent = $09e991522ca7e64e$var$game.getScore();\n    const gameStatus = $09e991522ca7e64e$var$game.getStatus();\n    if (gameStatus === \"win\") document.querySelector(\".message-win\").classList.remove(\"hidden\");\n    else if (gameStatus === \"lose\") document.querySelector(\".message-lose\").classList.remove(\"hidden\");\n}\n$09e991522ca7e64e$var$buttonStart.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$buttonStart.className === \"button restart\") $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$updateView();\n    document.querySelector(\".message-win\").classList.add(\"hidden\");\n    document.querySelector(\".message-lose\").classList.add(\"hidden\");\n    document.querySelector(\".message-start\").classList.add(\"hidden\");\n    $09e991522ca7e64e$var$buttonStart.textContent = \"Restart\";\n    $09e991522ca7e64e$var$buttonStart.className = \"button restart\";\n});\n\n\n//# sourceMappingURL=index.e2c0613f.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class.js');\n\nconst game = new Game();\n\nconst cells = document.querySelectorAll('.field-cell');\nconst buttonStart = document.querySelector('.button.start');\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.getStatus() === 'playing') {\n    switch (e.key) {\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n    }\n\n    updateView();\n  }\n});\n\nfunction updateView() {\n  let i = 0;\n  const state = game.getState();\n\n  for (let row = 0; row < 4; row++) {\n    for (let col = 0; col < 4; col++) {\n      const cell = cells[i];\n\n      cell.className = 'field-cell';\n\n      if (state[row][col]) {\n        cell.textContent = state[row][col];\n        cell.classList.add(`field-cell--${state[row][col]}`);\n      } else {\n        cell.textContent = '';\n      }\n      i++;\n    }\n  }\n\n  document.querySelector('.game-score').textContent = game.getScore();\n\n  const gameStatus = game.getStatus();\n\n  if (gameStatus === 'win') {\n    document.querySelector('.message-win').classList.remove('hidden');\n  } else if (gameStatus === 'lose') {\n    document.querySelector('.message-lose').classList.remove('hidden');\n  }\n}\n\nbuttonStart.addEventListener('click', () => {\n  if (buttonStart.className === 'button restart') {\n    game.restart();\n  }\n\n  game.start();\n  updateView();\n  document.querySelector('.message-win').classList.add('hidden');\n  document.querySelector('.message-lose').classList.add('hidden');\n  document.querySelector('.message-start').classList.add('hidden');\n  buttonStart.textContent = 'Restart';\n  buttonStart.className = 'button restart';\n});\n","'use strict';\nclass Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.initialState = initialState.map((row) => [...row]);\n    this.state = this.initialState.map((row) => [...row]);\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let stateChanged = false;\n\n    for (let row = 0; row < 4; row++) {\n      const newRow = this.merge(this.state[row]);\n\n      if (newRow.toString() !== this.state[row].toString()) {\n        stateChanged = true;\n      }\n\n      this.state[row] = newRow;\n    }\n\n    if (stateChanged) {\n      this.spawn();\n    }\n\n    this.checkLose();\n    this.checkWin();\n  }\n\n  moveRight() {\n    this.state = this.state.map((row) => row.reverse());\n    this.moveLeft();\n    this.state = this.state.map((row) => row.reverse());\n  }\n\n  moveUp() {\n    this.transpose();\n    this.moveLeft();\n    this.transpose();\n  }\n\n  moveDown() {\n    this.transpose();\n    this.moveRight();\n    this.transpose();\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state.map((row) => [...row]);\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = 'playing';\n\n    this.spawn();\n    this.spawn();\n\n    this.checkWin();\n    this.checkLose();\n  }\n\n  restart() {\n    this.state = this.initialState.map((row) => [...row]);\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  spawn() {\n    const emptyTiles = [];\n\n    for (let row = 0; row < 4; row++) {\n      for (let column = 0; column < 4; column++) {\n        if (this.state[row][column] === 0) {\n          emptyTiles.push({\n            row, column,\n          });\n        }\n      }\n    }\n\n    if (emptyTiles.length > 0) {\n      const { row, column }\n        = emptyTiles[Math.floor(Math.random() * emptyTiles.length)];\n\n      this.state[row][column] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  transpose() {\n    const transposedGrid = this.initialState.map((row) => [...row]);\n\n    for (let row = 0; row < 4; row++) {\n      for (let column = 0; column < 4; column++) {\n        transposedGrid[column][row] = this.state[row][column];\n      }\n    }\n\n    this.state = transposedGrid;\n  }\n\n  merge(row) {\n    let filteredRows = row.filter((element) => element !== 0);\n\n    for (let i = 0; i < filteredRows.length - 1; i++) {\n      if (filteredRows[i] === filteredRows[i + 1]) {\n        filteredRows[i] *= 2;\n        this.score += filteredRows[i];\n        filteredRows[i + 1] = 0;\n      }\n    }\n\n    filteredRows = filteredRows.filter((element) => element !== 0);\n\n    while (filteredRows.length !== 4) {\n      filteredRows.push(0);\n    }\n\n    return filteredRows;\n  }\n\n  checkWin() {\n    for (let row = 0; row < 4; row++) {\n      for (let column = 0; column < 4; column++) {\n        if (this.state[row][column] === 2048) {\n          this.status = 'win';\n        }\n      }\n    }\n  }\n\n  checkLose() {\n    for (let row = 0; row < 4; row++) {\n      for (let column = 0; column < 4; column++) {\n        if (this.state[row][column] === 0) {\n          return;\n        }\n      }\n    }\n\n    for (let row = 0; row < 4; row++) {\n      for (let column = 0; column < 4; column++) {\n        if (\n          (row < 3\n            && this.state[row][column] === this.state[row + 1][column])\n          || (column < 3\n            && this.state[row][column] === this.state[row][column + 1])\n        ) {\n          return;\n        }\n      }\n    }\n\n    this.status = 'lose';\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","map","row","state","score","status","moveLeft","stateChanged","newRow","merge","toString","spawn","checkLose","checkWin","moveRight","reverse","moveUp","transpose","moveDown","getScore","getState","getStatus","start","restart","emptyTiles","column","push","length","Math","floor","random","transposedGrid","filteredRows","filter","element","i","$09e991522ca7e64e$var$cells","document","querySelectorAll","$09e991522ca7e64e$var$buttonStart","querySelector","$09e991522ca7e64e$var$updateView","col","cell","className","textContent","classList","add","gameStatus","remove","addEventListener","e","key"],"version":3,"file":"index.e2c0613f.js.map"}